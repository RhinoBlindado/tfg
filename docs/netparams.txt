--dataroot', required=True, help='path to meshes (should have subfolders train, test)')
--dataset_mode', choices={"classification", "segmentation"}, default='classification')
--ninput_edges', type=int, default=750, help='# of input edges (will include dummy edges)')
--max_dataset_size', type=int, default=float("inf"), help='Maximum number of samples per epoch')
--batch_size', type=int, default=16, help='input batch size')
--arch', type=str, default='mconvnet', help='selects network to use') #todo add choices
--resblocks', type=int, default=0, help='# of res blocks')
--fc_n', type=int, default=100, help='# between fc and nclasses') #todo make generic
--ncf', nargs='+', default=[16, 32, 32], type=int, help='conv filters')
--pool_res', nargs='+', default=[1140, 780, 580], type=int, help='pooling res')
--norm', type=str, default='batch',help='instance normalization or batch normalization or group normalization')
--num_groups', type=int, default=16, help='# of groups for groupnorm')
--init_type', type=str, default='normal', help='network initialization [normal|xavier|kaiming|orthogonal]')
--init_gain', type=float, default=0.02, help='scaling factor for normal, xavier and orthogonal.')
--num_threads', default=3, type=int, help='# threads for loading data')
--gpu_ids', type=str, default='0', help='gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU')
--name', type=str, default='debug', help='name of the experiment. It decides where to store samples and models')
--checkpoints_dir', type=str, default='./checkpoints', help='models are saved here')
--serial_batches', action='store_true', help='if true, takes meshes in order, otherwise takes them randomly')
--seed', type=int, help='if specified, uses seed')
--export_folder', type=str, default='', help='exports intermediate collapses to this folder')


# TRAIN
--print_freq', type=int, default=10, help='frequency of showing training results on console')
--save_latest_freq', type=int, default=250, help='frequency of saving the latest results')
--save_epoch_freq', type=int, default=1, help='frequency of saving checkpoints at the end of epochs')
--run_test_freq', type=int, default=1, help='frequency of running test in training script')
--continue_train', action='store_true', help='continue training: load the latest model')
--epoch_count', type=int, default=1, help='the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...')
--phase', type=str, default='train', help='train, val, test, etc')
--which_epoch', type=str, default='latest', help='which epoch to load? set to latest to use latest cached model')
--niter', type=int, default=100, help='# of iter at starting learning rate')
--niter_decay', type=int, default=500, help='# of iter to linearly decay learning rate to zero')
--beta1', type=float, default=0.9, help='momentum term of adam')
--lr', type=float, default=0.0002, help='initial learning rate for adam')
--lr_policy', type=str, default='lambda', help='learning rate policy: lambda|step|plateau')
--lr_decay_iters', type=int, default=50, help='multiply by a gamma every lr_decay_iters iterations')
--num_aug', type=int, default=10, help='# of augmentation files')
--scale_verts', action='store_true', help='non-uniformly scale the mesh e.g., in x, y or z')
--slide_verts', type=float, default=0, help='percent vertices which will be shifted along the mesh surface')
--flip_edges', type=float, default=0, help='percent of edges to randomly flip')
--no_vis', action='store_true', help='will not use tensorboard')
--verbose_plot', action='store_true', help='plots network weights, etc.')

# TEST
--results_dir', type=str, default='./results/', help='saves results here.')
--phase', type=str, default='test', help='train, val, test, etc') #todo delete.
--which_epoch', type=str, default='latest', help='which epoch to load? set to latest to use latest cached model')
--num_aug', type=int, default=1, help='# of augmentation files')
