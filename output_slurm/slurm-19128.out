------------ Options -------------
arch: mconvnet
batch_size: 1
beta1: 0.9
checkpoints_dir: ./checkpoints
continue_train: False
dataroot: ./data/datasets/ResTest-30K
dataset_mode: classification
epoch_count: 1
export_folder: 
fc_n: 100
flip_edges: 0.0
gpu_ids: [0]
init_gain: 0.02
init_type: normal
is_train: True
lr: 0.0002
lr_decay_iters: 50
lr_policy: lambda
max_dataset_size: inf
name: MedMeshCNN-ResTest-30K
ncf: [64, 128, 256, 256]
ninput_edges: 30000
niter: 3
niter_decay: 0
no_vis: False
norm: none
num_aug: 1
num_groups: 1
num_threads: 2
phase: train
pool_res: [24000, 18000, 12000, 7200]
print_freq: 9999
resblocks: 0
run_test_freq: 9999
save_epoch_freq: 1
save_latest_freq: 250
scale_verts: False
seed: 16
serial_batches: False
slide_verts: 0.0
verbose_plot: False
weighted_loss: [0.25, 0.25, 0.25, 0.25]
which_epoch: latest
-------------- End ----------------
loaded mean / std from cache
#training meshes = 1
---------- Network initialized -------------
[Network] Total number of parameters : 0.560 M
-----------------------------------------------
/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py:124: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1603728993639/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  index = (sparseIndices[0] == value).nonzero()
Traceback (most recent call last):
  File "./networks/MedMeshCNN/train.py", line 32, in <module>
    model.optimize_parameters()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 66, in optimize_parameters
    out = self.forward()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 57, in forward
    out = self.net(self.edge_features, self.mesh)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/parallel/data_parallel.py", line 159, in forward
    return self.module(*inputs[0], **kwargs[0])
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/networks.py", line 151, in forward
    x = getattr(self, 'pool{}'.format(i))(x, mesh)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 21, in __call__
    return self.forward(fe, meshes)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 34, in forward
    self.__pool_main(mesh_index)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 53, in __pool_main
    self.__pool_edge(mesh, edge_id, mask, edge_groups)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 64, in __pool_edge
    self.__merge_edges[0] = self.__pool_side(mesh, edge_id, mask, edge_groups, 0)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 107, in __pool_side
    MeshPool.__union_groups(mesh, edge_groups, key_b, key_a)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 196, in __union_groups
    edge_groups.union(source, target)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_union.py", line 23, in union
    row = myindexrowselect(self.groups, index, self.device).to(self.device)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py", line 138, in myindexrowselect
    size=(len(mask_index), groups.shape[1]))
RuntimeError: backend of indices (CUDA) must match backend of values (CPU)
------------ Options -------------
arch: mconvnet
batch_size: 1
beta1: 0.9
checkpoints_dir: ./checkpoints
continue_train: False
dataroot: ./data/datasets/ResTest-50K
dataset_mode: classification
epoch_count: 1
export_folder: 
fc_n: 100
flip_edges: 0.0
gpu_ids: [0]
init_gain: 0.02
init_type: normal
is_train: True
lr: 0.0002
lr_decay_iters: 50
lr_policy: lambda
max_dataset_size: inf
name: MedMeshCNN-ResTest-50K
ncf: [64, 128, 256, 256]
ninput_edges: 50000
niter: 3
niter_decay: 0
no_vis: False
norm: none
num_aug: 1
num_groups: 1
num_threads: 2
phase: train
pool_res: [40000, 30000, 20000, 12000]
print_freq: 9999
resblocks: 0
run_test_freq: 9999
save_epoch_freq: 1
save_latest_freq: 250
scale_verts: False
seed: 16
serial_batches: False
slide_verts: 0.0
verbose_plot: False
weighted_loss: [0.25, 0.25, 0.25, 0.25]
which_epoch: latest
-------------- End ----------------
loaded mean / std from cache
#training meshes = 1
---------- Network initialized -------------
[Network] Total number of parameters : 0.560 M
-----------------------------------------------
/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py:124: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1603728993639/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  index = (sparseIndices[0] == value).nonzero()
Traceback (most recent call last):
  File "./networks/MedMeshCNN/train.py", line 32, in <module>
    model.optimize_parameters()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 66, in optimize_parameters
    out = self.forward()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 57, in forward
    out = self.net(self.edge_features, self.mesh)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/parallel/data_parallel.py", line 159, in forward
    return self.module(*inputs[0], **kwargs[0])
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/networks.py", line 151, in forward
    x = getattr(self, 'pool{}'.format(i))(x, mesh)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 21, in __call__
    return self.forward(fe, meshes)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 34, in forward
    self.__pool_main(mesh_index)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 53, in __pool_main
    self.__pool_edge(mesh, edge_id, mask, edge_groups)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 64, in __pool_edge
    self.__merge_edges[0] = self.__pool_side(mesh, edge_id, mask, edge_groups, 0)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 107, in __pool_side
    MeshPool.__union_groups(mesh, edge_groups, key_b, key_a)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 196, in __union_groups
    edge_groups.union(source, target)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_union.py", line 23, in union
    row = myindexrowselect(self.groups, index, self.device).to(self.device)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py", line 138, in myindexrowselect
    size=(len(mask_index), groups.shape[1]))
RuntimeError: backend of indices (CUDA) must match backend of values (CPU)
------------ Options -------------
arch: mconvnet
batch_size: 1
beta1: 0.9
checkpoints_dir: ./checkpoints
continue_train: False
dataroot: ./data/datasets/ResTest-100K
dataset_mode: classification
epoch_count: 1
export_folder: 
fc_n: 100
flip_edges: 0.0
gpu_ids: [0]
init_gain: 0.02
init_type: normal
is_train: True
lr: 0.0002
lr_decay_iters: 50
lr_policy: lambda
max_dataset_size: inf
name: MedMeshCNN-ResTest-100K
ncf: [64, 128, 256, 256]
ninput_edges: 100000
niter: 3
niter_decay: 0
no_vis: False
norm: none
num_aug: 1
num_groups: 1
num_threads: 2
phase: train
pool_res: [80000, 60000, 40000, 24000]
print_freq: 9999
resblocks: 0
run_test_freq: 9999
save_epoch_freq: 1
save_latest_freq: 250
scale_verts: False
seed: 16
serial_batches: False
slide_verts: 0.0
verbose_plot: False
weighted_loss: [0.25, 0.25, 0.25, 0.25]
which_epoch: latest
-------------- End ----------------
loaded mean / std from cache
#training meshes = 1
---------- Network initialized -------------
[Network] Total number of parameters : 0.560 M
-----------------------------------------------
/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py:124: UserWarning: This overload of nonzero is deprecated:
	nonzero()
Consider using one of the following signatures instead:
	nonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1603728993639/work/torch/csrc/utils/python_arg_parser.cpp:882.)
  index = (sparseIndices[0] == value).nonzero()
Traceback (most recent call last):
  File "./networks/MedMeshCNN/train.py", line 32, in <module>
    model.optimize_parameters()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 66, in optimize_parameters
    out = self.forward()
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/mesh_classifier.py", line 57, in forward
    out = self.net(self.edge_features, self.mesh)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/parallel/data_parallel.py", line 159, in forward
    return self.module(*inputs[0], **kwargs[0])
  File "/mnt/homeGPU/vlugli/condaEnvs/meshcnnplus/lib/python3.6/site-packages/torch/nn/modules/module.py", line 727, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/networks.py", line 151, in forward
    x = getattr(self, 'pool{}'.format(i))(x, mesh)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 21, in __call__
    return self.forward(fe, meshes)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 34, in forward
    self.__pool_main(mesh_index)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 53, in __pool_main
    self.__pool_edge(mesh, edge_id, mask, edge_groups)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 64, in __pool_edge
    self.__merge_edges[0] = self.__pool_side(mesh, edge_id, mask, edge_groups, 0)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 107, in __pool_side
    MeshPool.__union_groups(mesh, edge_groups, key_b, key_a)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_pool.py", line 196, in __union_groups
    edge_groups.union(source, target)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/models/layers/mesh_union.py", line 23, in union
    row = myindexrowselect(self.groups, index, self.device).to(self.device)
  File "/mnt/homeGPU/vlugli/tfg/networks/MedMeshCNN/util/util.py", line 138, in myindexrowselect
    size=(len(mask_index), groups.shape[1]))
RuntimeError: backend of indices (CUDA) must match backend of values (CPU)
